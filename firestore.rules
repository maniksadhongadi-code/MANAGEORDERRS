/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a customer-ownership model, where only the customer themselves (or potentially an admin role that is not yet defined) can read, update, or delete their own customer document.  Customer listing is forbidden. The 'isArchived' flag enables soft deletes without permanently removing data.
 * @data_structure All customer data is stored under the /customers/{customerId} path, with each document representing a single customer.
 * @key_security_decisions Customer listing is explicitly denied.
 * @denormalization_for_authorization The 'id' field within each customer document is used to ensure it matches the 'customerId' in the path.  This is validated on creation and enforced as immutable on updates.
 * @structural_segregation N/A - All customer data resides within a single collection, with the 'status' and 'isArchived' fields used to manage the lifecycle.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual customer documents.
     * @path /customers/{customerId}
     * @allow (create) - Authenticated user can create their own customer document with a matching customerId.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own customer document.
     * @deny (create) - Non-authenticated user attempts to create a customer document.
     * @deny (get, update, delete) - Authenticated user attempts to access a customer document that does not belong to them.
     * @principle Enforces document ownership for writes and reads.
     */
    match /customers/{customerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(customerId) {
        return request.auth.uid == customerId;
      }

      function isExistingOwner(customerId) {
          return isOwner(customerId) && resource != null;
      }

      allow get: if isOwner(customerId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.id == customerId;
      allow update: if isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(customerId);
    }
  }
}